
//Mostly just a decorator tbh, but it allows user to be sure that if it passes through here
//then it's a valid class
new_class(name, declarer)->(
    if(!has(declarer, '__init__') || type(declarer:'__init__')!='function', throw('missing_constructor', 'value_exception', declarer));
    declarer:'__name__' = name;
    declarer
);

is_class(class)->
    has(class, '__init__') && type(class:'__init__')=='function' && has(class, '__name__');

check_class(class)->
    if(!is_class(class), throw('unknown_class', 'value_exception', class));

//object is literally the same as class, except we have called initializer
new_object(class, ...args)->(
    check_class(class);
    call(class:'__init__', class, ...args);
);

//This is for calling public functions (which don't begin with _)
//You can use call() directly, but this gives return value of functions neatly
call_function(object, function, ...args)->(
    check_class(object);
    if(!has(object, function), throw('unknown_method', 'value_exception', function));
    if(split(function):0 == '_', throw('hidden_method', 'value_exception', function));
    cb = call(object:function, object, ...args);
    if(type(cb)=='map',
        object = cb; null,
        type(cb)=='list',
        object=cb:0; cb:1,
        // must either return modified object, or a list pair of the object and the return value of the functoion
        throw('invalid_function_return', 'value_exception', cb)
    )
);
